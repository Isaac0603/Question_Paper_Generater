const Question = require("../models/Question");

// ‚úÖ Save a new question
const saveQuestion = async (req, res) => {
  try {
    console.log("üõ†Ô∏è Full request body received at backend:", JSON.stringify(req.body, null, 2));

    const { courseName, subject, question, options, correctOption, index } = req.body;

    // ‚úÖ Validate incoming request
    if (!courseName || !subject || !question || !options || !correctOption || index === undefined) {
      console.warn("‚ö†Ô∏è Validation Failed! Missing fields in request.");
      return res.status(400).json({ error: "‚ö†Ô∏è All fields are required!" });
    }

    // ‚úÖ Add this before saving to prevent invalid options
    if (!Array.isArray(options) || options.length < 2 || options.some(opt => !opt.value.trim())) {
      console.warn("‚ö†Ô∏è Validation Failed: Options must have at least two valid entries!");
      return res.status(400).json({ error: "‚ö†Ô∏è At least two options with valid text are required!" });
    }

    console.log(`üîç Checking if question already exists at index ${index}...`);
    const existingQuestion = await Question.findOne({ courseName, subject, index });

    if (existingQuestion) {
      console.log(`üîÑ Updating existing question at index ${index}`);
      existingQuestion.question = question;
      existingQuestion.options = options;
      existingQuestion.correctOption = correctOption;
      
      console.log("üíæ Saving updated question...");
      await existingQuestion.save();
      
      console.log("‚úÖ Question updated successfully!");
      return res.status(200).json({ message: "‚úÖ Question updated successfully!", question: existingQuestion });
    }

    console.log("üÜï No existing question found. Creating new question...");
    const newQuestion = new Question({
      courseName,
      subject,
      question,
      options,
      correctOption,
      index,
    });

    console.log("üíæ Saving new question...");
    await newQuestion.save();
    console.log("‚úÖ New question saved successfully!");

    res.status(201).json({ message: "‚úÖ Question saved successfully!", question: newQuestion });

  } catch (error) {
    console.error("‚ùå Internal Server Error while saving question:", error);
    res.status(500).json({ error: "‚ùå Failed to save question", details: error.message });
  }
};



// ‚úÖ Fetch Questions by Course (Categorized into Subjects)
const fetchQuestionsByCourse = async (req, res) => {
  const { course } = req.query;

  if (!course) {
    return res.status(400).json({ error: "‚ö†Ô∏è Course name is required!" });
  }

  try {
    const questionPool = {
      LogicalReasoning: await Question.find({ courseName: course, subject: "Logical Reasoning" }).limit(15),
      QuantitativeAptitude: await Question.find({ courseName: course, subject: "Quantitative Aptitude" }).limit(15),
      English: await Question.find({ courseName: course, subject: "English" }).limit(10),
      Custom: await Question.find({ courseName: course, subject: "Custom" }).limit(10),
    };

    res.status(200).json({ message: "‚úÖ Questions fetched successfully!", questionPool });
  } catch (error) {
    console.error("‚ùå Error fetching questions by course:", error);
    res.status(500).json({ error: "‚ùå Server error while fetching questions" });
  }
};

// ‚úÖ Get a specific question by index
const getQuestionByIndex = async (req, res) => {
  try {
    const { courseName, subject, index } = req.query;
    console.log(`üîç Fetching question at index ${index} for course "${courseName}" and subject "${subject}"`);

    if (!courseName || !subject || index === undefined) {
      console.error("‚ùå Missing parameters:", { courseName, subject, index });
      return res.status(400).json({ error: "‚ö†Ô∏è Course name, subject, and index are required!" });
    }

    const question = await Question.findOne({ courseName, subject, index });

    if (!question) {
      console.warn(`‚ö†Ô∏è No question found at index ${index}.`);
      return res.status(200).json({ message: "‚ö†Ô∏è No question exists at this index." });
    }

    console.log(`‚úÖ Found question at index ${index}:`, question);
    res.status(200).json({
      question: question.question,
      options: question.options,
      correctOption: question.correctOption,
    });
  } catch (error) {
    console.error("‚ùå Error fetching question:", error);
    res.status(500).json({ error: "‚ùå Failed to fetch question" });
  }
};



// ‚úÖ Export Only the Needed Functions
module.exports = { saveQuestion, fetchQuestionsByCourse, getQuestionByIndex };
